Шпаргалка по Git — основные команды
Ниже приведены подсказки по использованию git в различных ситуациях. Я использую подобную шпаргалку для быстрого копипаста, чтобы не отвлекаться, когда голова занята сложными задачами. По мере создания новых инструкций, статья будет обновляться.

Шпаргалка по Git — основные команды
Заходим в папку, в которую склонирован репозиторий. С этого начинается любая работа.

cd диск:/папка_репозитория

Игнорирование файлов и директорий с помощью .gitignore

Самое первое, что мне следует сделать после инициализации нового Git репозитория, это - создать файл .gitignore. Файл .gitignore используется для того, чтобы отфильтровывать те файлы и каталоги, изменение которых вы не хотите отслеживать в Git репозитарии. Пример:

# Lines starting with '#' are considered comments.
# Ignore any file named foo.txt.
foo.txt
# Ignore (generated) html files,
*.html
# except foo.html which is maintained by hand.
!foo.html
# Ignore objects and archives.
*.[oa]
Вы можете также расположить .gitignore файлы в другой директории в вашем рабочем дереве, и их правила будут распространяться только на эти директории и их поддиректории. Файлы .gitignore как и любые другие файлы могут быть добавлены в репозиторий (выполните git add .gitignore и git commit как обычно)

Клонирование репозитория

git clone https://github.com/jashkenas/underscore.git

Обновление данных

git pull - обновление данных

git pull origin name_branche - обновление данных из определнной ветки

Добавление изменений в комит (индексация изменений)

git add . - добавление всех недобавленных файлов в комит (внести в индекс все изменения, включая новые файлы)

git add file1 file2 ... fileN - добавление только указанных файлов

Удаление из комита

git rm file1 file2 ... fileN - удаление указанных файлов из комита (git rm Documentation/\*.txt)

git rm -f file1 file2 ... fileN - удаление файла из комита и с жесткого диска:

Комит в локальный репозиторий

git commit "примечание" - только файлы, которые были обработаны с помощью git add/rm

git commit -a -m "примечание"-  совершит коммит, автоматически индексируя изменения в файлах проекта. Новые файлы при этом индексироваться не будут! Удаление же файлов будет учтено.

Создание ветки

git checkout --track -b name_of_newbranch origin/master - создание ветки локально

git push origin local_branch_name:remote_branch_name - создание удаленной ветки

git branch -m <имя_ветки> <новое_имя_ветки> - перименование ветки

git branch -d <имя_ветки> - удалить ветку

Поместить файл в удаленный репозиторий

git push origin name_branche - поместить изменения в заданную ветку

git push - помесить изменения

Откаты

git checkout -- file.txt - вернуть файл на состоние последнего коммита (локально)

git reset --hard - откатиться к предыдущей сохраненной версии

Состояние проекта

git status - выводит информацию обо всех изменениях, внесенных в дерево директорий проекта по сравнению с последним коммитом рабочей ветки